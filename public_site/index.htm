<html>
  <head>
    <meta charset="UTF-8" />

    <title>Speed Dating</title>

    <style>
      body {
        margin: 1in;
        font-family: "Avenir", sans-serif;
      }

      h2 {
        font-size: 16;
        font-weight: normal;
      }

      .gridlines .domain {
        display: "none";
      }

      div.child {
        display: inline-block;
        justify-content: center;
      }

      div#filters {
        border: solid black;
        border-radius: 2%;
        padding: 1em;
        margin: 1em;
      }

      div#filters input[type="checkbox"]{
        appearance: none;
      }

      div#filters label{
        display: flex;
        padding: 0.5em;
        gap: 0.5em;
        font-weight: none;
      }

      div#container {
        display: flex;
      }

       
    </style>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.js"></script>
    <script src="https://unpkg.com/jeezy@1.13.1/lib/jeezy.min.js"></script>

  </head>
  <body>
    <h1>Homework 2</h1>
    <h2>Sydney Bednar (sb844), Victoria Eshun (vee4), Noorejehan Umar (nu44)</h2>
    <div id="container">
    <div id="filters" class="child">
      <div id="gender">
        <h3>Gender</h3>
        <label>
          <input type="checkbox" id="female">Female</input>
        </label>
        
        <label>
          <input type="checkbox" id="male">Male</input>
        </label>
        
      </div>
      <div id="race">
        <h3>Race</h3>
        <label>
          <input type="checkbox" id="European">European/Caucasian-American</input>
        </label>
       
        <label>
          <input type="checkbox" id="Asian">Asian/Pacific Islander/Asian-American </input>
        </label>
        
        <label>
          <input type="checkbox" id="Latino">Latino/Hispanic American</input>
        </label>
        
        <label>
          <input type="checkbox" id="Black">Black/African American</input>
        </label>
       
        <label>
          <input type="checkbox" id="Other">Other</input>
        </label>
        
      </div>
    </div>
    <div id="charts" class="child">
      <h1>What do people THINK they prefer in a partner?</h1>
      <svg id="bubble" width="1000" , height="200"></svg>
      <h1>What do people ACTUALLY prefer in a partner?</h1>
      <svg id="heatmap" width="800" , height="200"></svg>
    </div>
    </div>
    
    <div id="scatter"></g>
    <script>
      const bubble = d3.select("svg#bubble")
      const bWidth = bubble.attr("width")
      const bHeight = bubble.attr("height")
      const margin = { top: 10, right: 10, bottom: 40, left: 50 };
      const circles = bubble.append("g").attr("id", "circles").attr('transform', 'translate(100,0)');
      const femaleButton = d3.select("#female")
      const maleButton = d3.select("#male")
      const whiteButton = d3.select("#European")
      const asianButton = d3.select("#Asian")
      const latinoButton = d3.select("#Latino")
      const blackButton = d3.select("#Black")
      const otherButton = d3.select("#Other")

      const bubWidth = bWidth - margin.left - margin.right;
      const bubHeight = bHeight - margin.top - margin.bottom;

      const requestData = async () => {
        let data = await d3.csv('clean_speeddating.csv', d3.autoType)
        
        console.log(data);

    // bubble plot work here
      

       d3.selectAll("input").on("change", function updateChart()  {
      
        d3.select(this).style("font-weight", "bold")

       var filters = []


       if(d3.select("#female").property("checked")){
         filters.push("female")
       }
       if(d3.select("#male").property("checked")){
         filters.push("male")
       }
       if(d3.select("#European").property("checked")){
         filters.push("European")
       }
       if(d3.select("#Asian").property("checked")){
         filters.push("Asian")
       }
       if(d3.select("#Latino").property("checked")){
         filters.push("Latino")
       }
       if(d3.select("#Black").property("checked")){
         filters.push("Black")
       }
       if(d3.select("#Other").property("checked")){
         filters.push("Other")
       }

       updateHeat(filters); 


       // update heatmap
       

         console.log(filters)


           var selectedValue = data.filter(d=> filters.includes(d.gender) || filters.includes(d.race) || (filters.includes(d.gender) && filters.includes(d.race)));
           console.log(selectedValue)
           const attributeNames = Object.keys(selectedValue[0]).filter(d => d !== "gender" || d !=="race");
           const attributeData = attributeNames.map(attribute => {
           const ratings = selectedValue.map(d => +d[attribute]);
           const averageRating = d3.mean(ratings);
           return { attribute, rating: averageRating };
         });


         const filteredAttributes= attributeData.filter(obj => obj.attribute.includes("important"));


         console.log(filteredAttributes)


         const ratingExtent = d3.extent(filteredAttributes, d => d.rating)
         const sizeScale = d3.scaleSqrt().domain(ratingExtent).range([10, 70]);
         const colorScale = d3.scaleOrdinal().range(["#7E0080", "#9B51B4", "#DF6FA0", 
         "#EF224B", "#C20232", "#6E0E0A"]);


         const circlesUpdated = circles.selectAll('circle').data(filteredAttributes);
         const textUpdated = circles.selectAll('text').data(filteredAttributes);


         circlesUpdated
         .attr('cx', (d, i) => (i * 120))
         .attr("cy", bHeight/2)
         .attr('r', d => sizeScale(d.rating))
         .attr('fill', d => colorScale(d.attribute));


         textUpdated
         .text(d => d.attribute.replace('_important', ''))
         .attr('x', (d, i) => (i * 120))
         .attr('y', bHeight/2 - 80)
         .attr('text-anchor', 'middle')
         .attr('font-size', '11px')
         .attr('fill', 'black');


         circlesUpdated.exit().remove();
         textUpdated.exit().remove();


         circlesUpdated
         .enter()
         .append('circle')
         .attr('cx', (d, i) => (i * 120))
         .attr("cy", bHeight/2)
         .attr('r', d => sizeScale(d.rating))
         .attr('fill', d => colorScale(d.attribute));


         textUpdated
         .enter()
         .append('text')
         .text(d => d.attribute.replace('_important', ''))
         .attr('x', (d, i) => (i * 120))
         .attr('y', bHeight/2 - 80)
         .attr('text-anchor', 'middle')
         .attr('font-size', '11px')
         .attr('fill', 'black');
         })
 


    // scatterplots work here **might have to do histograms
        let scatGroup = d3.select("div#scatter")

        let attributes = ['ambition_partner', 'attractive_partner', 'funny_partner', 
        'intelligence_partner', 'shared_interests_partner', 'sincere_partner']

        const sScales = {
          "like": d3.scaleLinear().domain(d3.extent(data, d => d['like'])),
          "attr_important": d3.scaleLinear().domain([0, 10]),
          "attr_partner": d3.scaleLinear()
        };


        // add an svg for each attribute
        attributes.forEach( (attr) => {

          let svg = scatGroup.append("svg")
                            .attr("class", attr)
                            .attr("width", 300)
                            .attr("height", 300)

          // drawScatter(svg, attr);

        });

        function jitter(min, max) {
          return (Math.random() * (max - min) + min)
        };

        // function to draw scatterplots
        function drawScatter(svg, attr) {
          let chartWidth = svg.attr("width") - margin.left - margin.right;
          let chartHeight = svg.attr("height") - margin.top - margin.bottom;

          let annotations = svg.append("g").attr("class", "annotations");


          

          let xScale = sScales['attr_partner'].copy().domain(d3.extent(data, d => d[attr])).range([0, chartWidth])
          let yScale = sScales['like'].copy().range([chartHeight, 0])

          let bottomGridlines = d3.axisBottom(xScale).tickSize(-chartHeight)
            .tickFormat("")

          let leftAxis = d3.axisLeft(yScale);
          let bottomAxis = d3.axisBottom(xScale);

          annotations.append("g")
            .attr("class", "x axis")
            .attr("transform", `translate(${margin.left},${chartHeight + margin.top})`)
            .call(bottomAxis);

          annotations.append("g")
            .attr("class", "y axis")
            .attr("transform", `translate(${margin.left},${margin.top})`)
            .call(leftAxis);

          annotations.append("g")
            .attr("class", "x gridlines")
            .attr("transform", `translate(${margin.left}, ${chartHeight + margin.top})`)
            .call(bottomGridlines);


          console.log(attr)

          let chartArea = svg.append("g")
                             .classed(attr, true)
                             .attr("translate", `translate(${margin.left}, ${margin.top})`)


          chartArea.append("g").selectAll(`circles.${attr}`)
                   .data(data)
                   .join("circle")
                   .attr("class", attr)
                   .attr("id", d => d['like'])
                   .attr("cx", d => xScale(d[attr])+jitter(-4,4))
                   .attr("cy", d => yScale(d['like'])+ jitter(-4, 4))
                   .attr("r", 2)
                   .attr("transform", `translate(${margin.left},${margin.top})`)
          
          annotations.append("text").text(attr).attr("x", -chartHeight/2)
            .attr("y", 20)
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
            .attr("transform", "rotate(-90)")
          
          annotations.append("text").text("like").attr("x", chartWidth/2 + margin.left)
            .attr("y", chartHeight + margin.top + margin.bottom -5)
            .attr("text-anchor", "middle")
            .style("font-size", "16px")
                
        } 
        // drawScatter();
        

    // heatmaps work here
        const heatmap = d3.select("svg#heatmap")
        const width = heatmap.attr("width") - margin.left
        const height = heatmap.attr("height") - margin.top - margin.bottom

        const attribs = ["attractive_partner", "sincere_partner", "funny_partner",
          "ambition_partner", "intelligence_partner", "shared_interests_partner", "like"]

        const noLike = ["attractive_partner", "sincere_partner", "funny_partner",
          "ambition_partner", "intelligence_partner", "shared_interests_partner"]
        
        var x = d3.scaleBand()
          .range([0, width])
          .domain(noLike)
          .padding(0.01);
        heatmap.append("g")
          .attr("transform", `translate(${margin.left}, ${height})`)
          .call(d3.axisBottom(x))

        // Build X scales and axis:
        var y = d3.scaleBand()
          .range([height, 0])
          .domain(["like"])
          .padding(0.01);
        heatmap.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(y));

        function updateHeat(filters){
          console.log(filters)
          let corr_data = data.filter(d => filters.includes(d.gender) || filters.includes(d.race) || (filters.includes(d.gender) && filters.includes(d.race)));
        
      
        let corr = jz.arr.correlationMatrix(corr_data, attribs)

        let corr_like = corr.filter(d => d.column_x === "like" && d.column_y != "like")
        console.log(corr_like)


        // Build color scale

        let corr_extent = d3.extent(corr_like, d => d.correlation)
        // console.log(corr_extent)
        var myColor = d3.scaleLinear()
          .range(["white", "red"])
          .domain([0,1])

        let heatArea = heatmap.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)

        const rects = heatArea.selectAll("rect.heat").data(corr_like) 
        const text = heatArea.selectAll("text.heat").data(corr_like)

        rects.exit().remove();
        
        rects.enter().append("rect")
          .attr("class", "heat")
          .attr("x", d => x(d.column_y))
          .attr("y", y("like"))
          .attr("width", x.bandwidth())
          .attr("height", y.bandwidth())
          .style("fill", d => myColor(d.correlation))  


        text.exit().remove();

        text.enter().append("text").attr("class", "heat")
            .attr("x", d => x(d.column_y) + 40)
            .attr("y", y.bandwidth()/2 + 5)
            .text(d => d.correlation.toFixed(2))

          // delete like from variables
          // need to add legend!!
          // also annotate with values
        }
    

      }
      requestData();

    </script>
   
  </body>
</html>